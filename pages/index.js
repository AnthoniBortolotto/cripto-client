import Head from "next/head";
import Image from "next/image";
import { useEffect, useState } from "react";
import styles from "../styles/Home.module.css";
import { getKeys } from "../utils";
import NodeRSA from "node-rsa";
import axios from "axios";

export default function Home() {
  const [userMessage, setUserMessage] = useState("");
  const [ownPrivateKey, setOwnPrivateKey] = useState(null);
  const [ownPublicKey, setOwnPublicKey] = useState(null);
  const [serverPublicKey, setServerPublicKey] = useState(null);
  const [serverMsg, setServerMsg] = useState(null);
  async function handlerButton() { // executa quando o botão é clicado
    const serverKey = new NodeRSA(); 
    console.log(serverPublicKey); // imprime a chave pública do servidor
    await serverKey.importKey(serverPublicKey, "public"); // importa a chave pública do servidor
    console.log(userMessage);
    const encriptedMessage = await serverKey.encrypt(userMessage, "base64"); // encripta a mensagem do usuário
    console.log(
      "mensagem encriptada com chave pública",
      encriptedMessage
    );
    const res = await axios.post("http://localhost:8080/", {
      msg: encriptedMessage
    }); // envia a mensagem encriptada para o servidor e guarda a mensagem encriptada do servidor
    const decrypter = await new NodeRSA(ownPrivateKey); //importa a chave privada do cliente
    const decriptedMessage = await decrypter.decrypt(res.data.msg); // decripta a mensagem do servidor com a chave privada do cliente
    setServerMsg(decriptedMessage.toString()); // seta a mensagem decriptada do servidor em um state para ser exibido na tela
  }
  useEffect(() => { // executa quando o componente é montado
    const generateKeys = async () => {
      const keys = await getKeys(); // gera chaves pública e privada
      setOwnPrivateKey(keys[0]); // guarda chave privada
      setOwnPublicKey(keys[1]); // guarda chave pública
     const req = await axios.post("http://localhost:8080/keys", { 
        publicKey: keys[1],
      }); // envia chave pública para o servidor
      const receivedPublicKey  = req.data.serverPublicKey; // recebe chave pública do servidor
      await setServerPublicKey(receivedPublicKey); // guarda chave pública do servidor
    };
    generateKeys();
  }, []);

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <section>
        <h1>
          Digite a mensagem para ser enviada de forma segura para o servidor:{" "}
        </h1>
        <input
          type="text"
          id="mensagem"
          value={userMessage}
          onChange={(e) => setUserMessage(e.target.value)}
        />
        <button onClick={handlerButton}>
          Clique aqui para enviar a mensagem
        </button>

        {serverMsg !== null && <h1>Mensagem do servidor: {serverMsg}</h1>}
      </section>
    </div>
  );
}
